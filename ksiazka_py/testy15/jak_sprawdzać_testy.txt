jeśli tworzymy osobny folder z plikami to trzeba zrobić z niego pakiet.
Pakiet tworzymy dodając w folerze pusty plik __init__.py

pytest:
python -m pytest
uruchomi wszystkie testy, które są w plikach zaczynających się od test*
i metodach w tych plikach zaczynających się od test*

python -m pytest -v
to samo ale wyświeli konkretne testy

python -m pytest -v ksiazka_py/testy19
uruchomi testy tylko z tego katalogu i podrzędnych

python -m pytest -k daj -v
uruchomi wszystkie testy mające w nazwie metody 'daj'

python -m pytest -m szczegolowe -W ignore::UserWarning -v
ukrywa warningi

@pytest.mark.szczegolowe
dekorator dodany nad metodami testującymi grupuje je do jednej nazwy
dodanie go powoduje ignorowanie normalnych nazw metod
po takim dodaniu podczas testów będą wyświetlane warningi, aby dodać 'szczegolowe' do przestrzeni mark
można to zrobić dodając plik pyproject.toml, a w opis nowych marks formacie z dokumentacji

python -m pytest ksiazka_py/testy15/testy21fixtury -v -s
-s powoduje wyświetlenie out z konsoli print()

def setup_module(): ... oraz def teardown_module():
uruchomi się na początku i na końcu pliku testów

fixtura - metoda, która przygotowuje dane lub wykonuje czynności inicjalizacyjne na potrzeby testów

@pytest.fixture
dodanie tego dekoratora nad naszą customową metodę i wpisanie nazwy dekorowanej metody jako parametru w definicji wybranych testów spowoduje uruchomienie tej
metody przed uruchomieniem każdego z tych testów

@pytest.fixture(scope='module')
dekorator nad naszą customową metodą spowoduje uruchomienie tej f.
jeden raz przed uruchomieniem testów z nazwą tej f. w definicji parametrów

@pytest.fixture(autouse=True)
# autouse zadziała tak tak setup_module - nie trzeba podawać nazwy funkcji w parametrach testów można mieszać ze scope='module', w tedy uruchomi się 1 raz dla całego modułu

python -m pytest --cov
sprawdzi cały projekt pod względem pokrycia kodu testami

python -m pytest --cov=ksiazka_py
pominie inne biblioteki i sprawdzi pokrycie tylko mojego kodu

python -m pytest ksiazka_py/testy15/testy20param/ --cov --cov-report=html
sprawdzić tylko wskazany folder, a wynik wrzuci to katalogu projektu do folderu htmlcov

pytest -W ignore::DeprecationWarning -s
pozwala wyświetlać printy podczas testów
